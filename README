Currently API is not considered to be final (read as, what you see is stub for testing). Currently you can use engine following way:
-------------------------------------------------------------------------------

from eos import Eos
from eos import State
from eos.data.dataHandler.jsonDataHandler import JsonDataHandler


dataHandler = JsonDataHandler('/home/user/src/pyfa/eos/dataFolder/phobos/')
engine = Eos(dataHandler, name='eos', storagePath='~/src/pyfa/eos/dataFolder/')

fit = engine.makeFit()
fit.ship = 11176  # Crow

for skillID in skills:
    skill = fit.skills.add(skillID)
    skill.level = 5

launchDg1 = fit.modules.high.fill(13926)
launchDg1.charge = 27365
launchDg1.state = State.active
launchDg2 = fit.modules.high.fill(13926)
launchDg2.charge = 27365
launchDg2.state = State.active
launchDg3 = fit.modules.high.fill(13926)
launchDg3.charge = 27365
launchDg3.state = State.active

mwdGistA = fit.modules.med.fill(19349)
mwdGistA.state = State.active
webTs = fit.modules.med.fill(14268)
webTs.state = State.active
disDomi = fit.modules.med.fill(14244)
disDomi.state = State.active

bcsDg1 = fit.modules.low.fill(13937)
bcsDg1.state = State.online
bcsDg2 = fit.modules.low.fill(13937)
bcsDg2.state = State.online
nanoDomi = fit.modules.low.fill(14127)
nanoDomi.state = State.online

rigor1 = fit.rigs.fill(31650)
rigor2 = fit.rigs.fill(31650)

snakeAlpha = fit.implants.add(19540)
snakeBeta = fit.implants.add(19551)
snakeGamma = fit.implants.add(19553)
snakeDelta = fit.implants.add(19554)
snakeEpsilon = fit.implants.add(19555)
snakeOmega = fit.implants.add(19556)
hwAgi = fit.implants.add(3095)
zorHyper = fit.implants.add(24663)
hwLights = fit.implants.add(3172)
hwMissiles = fit.implants.add(3140)

quafeZero = fit.boosters.add(3898)
synthCrash = fit.boosters.add(28672)

fit.validate()

-------------------------------------------------------------------------------

Attributes of any item are accessible via dictionary-like objects like crow.attributes, e.g.:

>>crow.attributes[37] # maxVelocity
5759.988204454497

Fit validation method currently raises exception if any fit check fails, its argument contains dictionary which explains what is wrong. If we replace domi nanofiber in above example with yet another BCS, following data will be returned:

{<eos.fit.item.module.Module object at 0x432ba10>: {1: ResourceErrorData(output=187.5, totalUsage=200.535, holderConsumption=19.845000000000002)}, <eos.fit.item.module.Module object at 0x4331050>: {1: ResourceErrorData(output=187.5, totalUsage=200.535, holderConsumption=24.0)}, <eos.fit.item.module.Module object at 0x4331410>: {1: ResourceErrorData(output=187.5, totalUsage=200.535, holderConsumption=24.0)}, <eos.fit.item.module.Module object at 0x432bcb0>: {1: ResourceErrorData(output=187.5, totalUsage=200.535, holderConsumption=25.0)}, <eos.fit.item.module.Module object at 0x432b4d0>: {1: ResourceErrorData(output=187.5, totalUsage=200.535, holderConsumption=19.845000000000002)}, <eos.fit.item.module.Module object at 0x432bd10>: {1: ResourceErrorData(output=187.5, totalUsage=200.535, holderConsumption=25.0)}, <eos.fit.item.module.Module object at 0x432b950>: {1: ResourceErrorData(output=187.5, totalUsage=200.535, holderConsumption=19.845000000000002)}, <eos.fit.item.module.Module object at 0x4331170>: {1: ResourceErrorData(output=187.5, totalUsage=200.535, holderConsumption=24.0)}, <eos.fit.item.module.Module object at 0x432bfb0>: {1: ResourceErrorData(output=187.5, totalUsage=200.535, holderConsumption=19.0)}}

Keys of dictionary are problematic modules (in this case, all CPU consumers on ship), values are dictionaries too, which list problems with given module. Keys of this dictionary are restriction IDs (eos.Restriction object), with 1 being CPU restriction; values contain detailed data about problem, in this case it's named tuple which shows ship CPU output, total CPU consumption and CPU use by current module. Different resstrictions contain different data, but in general format stays the same.
