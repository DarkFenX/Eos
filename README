Currently you can use engine following way:
-------------------------------------------------------------------------------

from eos import *
from eos.holder_filter import *
from eos.data.data_handler import JsonDataHandler


data_handler = JsonDataHandler('/path/to/phobos/data/dump/')
engine = Eos(data_handler, storage_path='~/path/to/logs/and/cache/', make_default=True)

fit = Fit()
fit.ship = Ship(11176)  # Crow

for skill_id in skills:
    fit.skills.add(Skill(skill_id, level=5))

fit.modules.high.equip(ModuleHigh(2404, state=State.active, charge=Charge(27365)))  # t2 light missile launcher with DG scourge ammo
fit.modules.high.equip(ModuleHigh(2404, state=State.active, charge=Charge(27365)))  # t2 light missile launcher with DG scourge ammo
fit.modules.high.equip(ModuleHigh(2404, state=State.active, charge=Charge(27365)))  # t2 light missile launcher with DG scourge ammo

fit.modules.med.equip(ModuleMed(19349, state=State.active))  # Gistii A-Type MWD
fit.modules.med.equip(ModuleMed(14254, state=State.active))  # Domi scrambler
fit.modules.med.equip(ModuleMed(14244, state=State.active))  # Domi disruptor
fit.modules.med.equip(ModuleMed(19814, state=State.active))  # PWNAGE target painter

fit.modules.low.equip(ModuleLow(13937, state=State.online))  # DG BCS
fit.modules.low.equip(ModuleLow(13937, state=State.online))  # DG BCS
fit.modules.low.equip(ModuleLow(14127, state=State.online))  # Domi nanofiber

fit.rigs.equip(Rig(31650))  # t2 rigor
fit.rigs.equip(Rig(31650))  # t2 rigor

fit.implants.add(Implant(19540))  # Snake Alpha
fit.implants.add(Implant(19551))  # Snake Beta
fit.implants.add(Implant(19553))  # Snake Gamma
fit.implants.add(Implant(19554))  # Snake Delta
fit.implants.add(Implant(19555))  # Snake Epsilon
fit.implants.add(Implant(19556))  # Snake Omega
fit.implants.add(Implant(3095))  # Agility hardwiring
fit.implants.add(Implant(24663))  # Zor Hyper-Link
fit.implants.add(Implant(3172))  # Light Missile damage hardwiring
fit.implants.add(Implant(3140))  # Missile launcher rof hardwiring

fit.boosters.add(Booster(3898))  # Quafe Zero
fit.boosters.add(Booster(28672))  # Synth Crash

fit.validate()

-------------------------------------------------------------------------------

Fit validation method currently raises exception if any fit check fails, its argument contains dictionary which explains what is wrong. If we replace domi nanofiber in above example with yet another BCS, following data will be returned:

{<eos.fit.holder.item.module.ModuleMed object at 0x7f96dfddd910>: {1: ResourceErrorData(total_use=217.55, output=200.0, holder_use=19.0)}, ...}

Keys of dictionary are problematic modules (in this case, all CPU consumers on ship), values are dictionaries too, which list problems with given module. Keys of this dictionary are restriction IDs (eos.Restriction object), with 1 being CPU restriction; values contain detailed data about problem, in this case it's named tuple which shows ship CPU output, total CPU consumption and CPU use by current module. Different restrictions contain different data, but in general format stays the same.

Attributes of any item are accessible via dictionary-like objects like crow.attributes, e.g.:

>>fit.ship.attributes[37] # maxVelocity
5614.461576001735

Stats of fit can be fetched using 'stats' access point:
>>fit.stats.agility_factor
3.593148863813811
>>fit.stats.cpu.used
193.55
>>fit.stats.get_ehp(DamageTypes(em=25, thermal=25, kinetic=25, explosive=25)).total
2005.580357142857
>>fit.stats.get_nominal_dps(reload=False).total
150.8354902813764
>>fit.stats.get_nominal_dps(reload=True).total
145.714760268934
>>fit.stats.get_nominal_dps(target_resistances=DamageTypes(em=0.2, thermal=0.3, kinetic=0.4, explosive=0.5), reload=True).total
87.4288561613604
>>fit.stats.get_nominal_dps(holder_filter=turret_filter).total
0
Not many stats are implemented yet, more to come soon.
