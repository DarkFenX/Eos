#===============================================================================
# Copyright (C) 2011 Diego Duclos
# Copyright (C) 2011-2012 Anton Vorobyov
#
# This file is part of Eos.
#
# Eos is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Eos is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Eos. If not, see <http://www.gnu.org/licenses/>.
#===============================================================================


from eos.const import EffectBuildStatus
from eos.eve.const import nulls
from eos.fit.attributeCalculator.info.infoBuilder import InfoBuilder


class Effect:
    """
    Represents a single effect. Effects are the building blocks which describe what its carrier
    does with other items.
    """

    def __init__(self, id_, categoryId, isOffensive=None, isAssistance=None,
                 fittingUsageChanceAttributeID=None, preExpressionId=None, postExpressionId=None):
        # The unique ID of an effect
        self.id = int(id_) if id_ is not None else None

        # Effect category actually describes type of effect, which determines
        # when it is applied - always, when item is active, overloaded, etc.
        self.categoryId = int(categoryId) if categoryId is not None else None

        # Whether the effect is offensive (e.g. guns)
        self.isOffensive = bool(isOffensive) if isOffensive is not None else None

        # Whether the effect is helpful (e.g. remote repairers)
        self.isAssistance = bool(isAssistance) if isAssistance is not None else None

        # PreExpression of the effect. A preExpression is the expression
        # that gets run when the module is activated
        self.preExpressionId = int(preExpressionId) if not preExpressionId in nulls else None

        # PostExpression of the effect. A postExpression gets run when the module gets disabled.
        self.postExpressionId = int(postExpressionId) if not postExpressionId in nulls else None

        # Stores EffectInfos which are assigned to given effect
        self._infos = None

        # Stores parsing status of info objects
        self.infoStatus = EffectBuildStatus.notParsed

    def getInfos(self, eos):
        """
        Get infos of effect.

        Positional arguments:
        eos -- something belonging in this eos instance
        requests data

        Return value:
        Set with Info objects generated by effect
        """
        if self._infos is None:
            self._infos, self.infoStatus = InfoBuilder().build(self, eos)
        return self._infos
